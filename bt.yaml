# 1. SUBSTITUTIONS (Names to be used in sensor IDs)
substitutions:
  name: "slzb-06-bluetooth"


# 2. GENERAL ESPHOME CONFIGURATION SETTINGS

## Project information
esphome:
  name: "${name}"
  name_add_mac_suffix: true
  project:
    name: SMLIGHT.SLZB-06(Bluetooth-only)
    version: "1.31"

## Board information
esp32:
  board: esp32dev
  flash_size: 16MB
  framework:
    type: arduino


## Connection to Home Assistant through API is enabled
api:

## Logger is enabled
#logger:

## OTA firmware updates are available
#ota:

## Accessible portal with control buttons is available
#web_server:
#  port: 80
#  local: True

## WiFi settings
#wifi:
#  ssid: !secret wifi_ssid
#  password: !secret wifi_password
#
#  # Enable fallback hotspot (captive portal) in case wifi connection fails
#  ap:
#    ssid: "slzb-06 Hotspot"
#    password: "slzb06"

## Enabling captive portal
# captive_portal:


# 3. EXTERNAL COMPONENTS USED
external_components:
  - source: github://tube0013/esphome-stream-server-v2

dashboard_import:
  package_import_url: github://smlight-tech/testesphome/bt.yaml


# 4. COMMUNICATION SETTINGS
## Ethernet Connection
ethernet:
  type: LAN8720
  mdc_pin: GPIO23
  mdio_pin: GPIO18
  clk_mode: GPIO0_IN
  phy_addr: 1
  power_pin: GPIO16

## MDNS service settings
mdns:
  services:
    - service: "_slzb-06-bluetooth"
      protocol: "_tcp"
      port: 6638
      txt:
        version: 1.0
        name: SMLIGHT SLZB-06
        radio_type: znp
        baud_rate: 115200
        data_flow_control: software


# 5. BLLUETOOTH PROXY COMPONENTS
esp32_ble_tracker:
  scan_parameters:
    interval: 1100ms
    window: 1100ms
    active: true

bluetooth_proxy:
  active: true

#button:
#- platform: safe_mode
#  name: Safe Mode Boot
#  entity_category: diagnostic


# 6. SENSORS
## Upteime information as sensor
text_sensor:
  - platform: template
    name: "SLZB-06 Uptime"
    lambda: |-
      uint32_t dur = id(uptime_s).state;
      int dys = 0;
      int hrs = 0;
      int mnts = 0;
      if (dur > 86399) {
        dys = trunc(dur / 86400);
        dur = dur - (dys * 86400);
      }
      if (dur > 3599) {
        hrs = trunc(dur / 3600);
        dur = dur - (hrs * 3600);
      }
      if (dur > 59) {
        mnts = trunc(dur / 60);
        dur = dur - (mnts * 60);
      }
      char buffer[17];
      sprintf(buffer, "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};
    icon: mdi:clock-start
    update_interval: 60s


## Uptime generic sensor
sensor:
  - platform: uptime
    id: uptime_s
    update_interval: 60s

# 7. SWITCHES
## ESP32 Restart
switch:
  - platform: restart
    id: coreRestart
    name: "Core restart"




## Mode LAN/USB switch
  - platform: gpio
    name: "DEVICE MODE SWITCH (LAN|OFF / USB|ON)"
    restore_mode: ALWAYS_OFF
    icon: mdi:toggle-switch
    internal: true
    id: gpio4Select
    pin:
      number: GPIO4

### LEDs swithces
  - platform: gpio
    name: "LED - device mode (Blue)"
    restore_mode: ALWAYS_OFF
    internal: true
    icon: mdi:toggle-switch
    id: gpio12LED1
    pin:
      number: GPIO12

  - platform: gpio
    name: "LED - power (Yellow)"
    restore_mode: ALWAYS_ON
    icon: mdi:toggle-switch
    id: gpio14LED2
    pin:
      number: GPIO14
